// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2024 12:29:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DoAn
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DoAn_vlg_sample_tst(
	I,
	sampler_tx
);
input [15:0] I;
output sampler_tx;

reg sample;
time current_time;
always @(I)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DoAn_vlg_check_tst (
	IA,
	IB,
	sampler_rx
);
input [15:0] IA;
input [15:0] IB;
input sampler_rx;

reg [15:0] IA_expected;
reg [15:0] IB_expected;

reg [15:0] IA_prev;
reg [15:0] IB_prev;

reg [15:0] IA_expected_prev;
reg [15:0] IB_expected_prev;

reg [15:0] last_IA_exp;
reg [15:0] last_IB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	IA_prev = IA;
	IB_prev = IB;
end

// update expected /o prevs

always @(trigger)
begin
	IA_expected_prev = IA_expected;
	IB_expected_prev = IB_expected;
end


// expected IA[ 15 ]
initial
begin
	IA_expected[15] = 1'bX;
end 
// expected IA[ 14 ]
initial
begin
	IA_expected[14] = 1'bX;
end 
// expected IA[ 13 ]
initial
begin
	IA_expected[13] = 1'bX;
end 
// expected IA[ 12 ]
initial
begin
	IA_expected[12] = 1'bX;
end 
// expected IA[ 11 ]
initial
begin
	IA_expected[11] = 1'bX;
end 
// expected IA[ 10 ]
initial
begin
	IA_expected[10] = 1'bX;
end 
// expected IA[ 9 ]
initial
begin
	IA_expected[9] = 1'bX;
end 
// expected IA[ 8 ]
initial
begin
	IA_expected[8] = 1'bX;
end 
// expected IA[ 7 ]
initial
begin
	IA_expected[7] = 1'bX;
end 
// expected IA[ 6 ]
initial
begin
	IA_expected[6] = 1'bX;
end 
// expected IA[ 5 ]
initial
begin
	IA_expected[5] = 1'bX;
end 
// expected IA[ 4 ]
initial
begin
	IA_expected[4] = 1'bX;
end 
// expected IA[ 3 ]
initial
begin
	IA_expected[3] = 1'bX;
end 
// expected IA[ 2 ]
initial
begin
	IA_expected[2] = 1'bX;
end 
// expected IA[ 1 ]
initial
begin
	IA_expected[1] = 1'bX;
end 
// expected IA[ 0 ]
initial
begin
	IA_expected[0] = 1'bX;
end 
// expected IB[ 15 ]
initial
begin
	IB_expected[15] = 1'bX;
end 
// expected IB[ 14 ]
initial
begin
	IB_expected[14] = 1'bX;
end 
// expected IB[ 13 ]
initial
begin
	IB_expected[13] = 1'bX;
end 
// expected IB[ 12 ]
initial
begin
	IB_expected[12] = 1'bX;
end 
// expected IB[ 11 ]
initial
begin
	IB_expected[11] = 1'bX;
end 
// expected IB[ 10 ]
initial
begin
	IB_expected[10] = 1'bX;
end 
// expected IB[ 9 ]
initial
begin
	IB_expected[9] = 1'bX;
end 
// expected IB[ 8 ]
initial
begin
	IB_expected[8] = 1'bX;
end 
// expected IB[ 7 ]
initial
begin
	IB_expected[7] = 1'bX;
end 
// expected IB[ 6 ]
initial
begin
	IB_expected[6] = 1'bX;
end 
// expected IB[ 5 ]
initial
begin
	IB_expected[5] = 1'bX;
end 
// expected IB[ 4 ]
initial
begin
	IB_expected[4] = 1'bX;
end 
// expected IB[ 3 ]
initial
begin
	IB_expected[3] = 1'bX;
end 
// expected IB[ 2 ]
initial
begin
	IB_expected[2] = 1'bX;
end 
// expected IB[ 1 ]
initial
begin
	IB_expected[1] = 1'bX;
end 
// expected IB[ 0 ]
initial
begin
	IB_expected[0] = 1'bX;
end 
// generate trigger
always @(IA_expected or IA or IB_expected or IB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected IA = %b | expected IB = %b | ",IA_expected_prev,IB_expected_prev);
	$display("| real IA = %b | real IB = %b | ",IA_prev,IB_prev);
`endif
	if (
		( IA_expected_prev[0] !== 1'bx ) && ( IA_prev[0] !== IA_expected_prev[0] )
		&& ((IA_expected_prev[0] !== last_IA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[0] = IA_expected_prev[0];
	end
	if (
		( IA_expected_prev[1] !== 1'bx ) && ( IA_prev[1] !== IA_expected_prev[1] )
		&& ((IA_expected_prev[1] !== last_IA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[1] = IA_expected_prev[1];
	end
	if (
		( IA_expected_prev[2] !== 1'bx ) && ( IA_prev[2] !== IA_expected_prev[2] )
		&& ((IA_expected_prev[2] !== last_IA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[2] = IA_expected_prev[2];
	end
	if (
		( IA_expected_prev[3] !== 1'bx ) && ( IA_prev[3] !== IA_expected_prev[3] )
		&& ((IA_expected_prev[3] !== last_IA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[3] = IA_expected_prev[3];
	end
	if (
		( IA_expected_prev[4] !== 1'bx ) && ( IA_prev[4] !== IA_expected_prev[4] )
		&& ((IA_expected_prev[4] !== last_IA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[4] = IA_expected_prev[4];
	end
	if (
		( IA_expected_prev[5] !== 1'bx ) && ( IA_prev[5] !== IA_expected_prev[5] )
		&& ((IA_expected_prev[5] !== last_IA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[5] = IA_expected_prev[5];
	end
	if (
		( IA_expected_prev[6] !== 1'bx ) && ( IA_prev[6] !== IA_expected_prev[6] )
		&& ((IA_expected_prev[6] !== last_IA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[6] = IA_expected_prev[6];
	end
	if (
		( IA_expected_prev[7] !== 1'bx ) && ( IA_prev[7] !== IA_expected_prev[7] )
		&& ((IA_expected_prev[7] !== last_IA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[7] = IA_expected_prev[7];
	end
	if (
		( IA_expected_prev[8] !== 1'bx ) && ( IA_prev[8] !== IA_expected_prev[8] )
		&& ((IA_expected_prev[8] !== last_IA_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[8] = IA_expected_prev[8];
	end
	if (
		( IA_expected_prev[9] !== 1'bx ) && ( IA_prev[9] !== IA_expected_prev[9] )
		&& ((IA_expected_prev[9] !== last_IA_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[9] = IA_expected_prev[9];
	end
	if (
		( IA_expected_prev[10] !== 1'bx ) && ( IA_prev[10] !== IA_expected_prev[10] )
		&& ((IA_expected_prev[10] !== last_IA_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[10] = IA_expected_prev[10];
	end
	if (
		( IA_expected_prev[11] !== 1'bx ) && ( IA_prev[11] !== IA_expected_prev[11] )
		&& ((IA_expected_prev[11] !== last_IA_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[11] = IA_expected_prev[11];
	end
	if (
		( IA_expected_prev[12] !== 1'bx ) && ( IA_prev[12] !== IA_expected_prev[12] )
		&& ((IA_expected_prev[12] !== last_IA_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[12] = IA_expected_prev[12];
	end
	if (
		( IA_expected_prev[13] !== 1'bx ) && ( IA_prev[13] !== IA_expected_prev[13] )
		&& ((IA_expected_prev[13] !== last_IA_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[13] = IA_expected_prev[13];
	end
	if (
		( IA_expected_prev[14] !== 1'bx ) && ( IA_prev[14] !== IA_expected_prev[14] )
		&& ((IA_expected_prev[14] !== last_IA_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[14] = IA_expected_prev[14];
	end
	if (
		( IA_expected_prev[15] !== 1'bx ) && ( IA_prev[15] !== IA_expected_prev[15] )
		&& ((IA_expected_prev[15] !== last_IA_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IA_expected_prev);
		$display ("     Real value = %b", IA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IA_exp[15] = IA_expected_prev[15];
	end
	if (
		( IB_expected_prev[0] !== 1'bx ) && ( IB_prev[0] !== IB_expected_prev[0] )
		&& ((IB_expected_prev[0] !== last_IB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[0] = IB_expected_prev[0];
	end
	if (
		( IB_expected_prev[1] !== 1'bx ) && ( IB_prev[1] !== IB_expected_prev[1] )
		&& ((IB_expected_prev[1] !== last_IB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[1] = IB_expected_prev[1];
	end
	if (
		( IB_expected_prev[2] !== 1'bx ) && ( IB_prev[2] !== IB_expected_prev[2] )
		&& ((IB_expected_prev[2] !== last_IB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[2] = IB_expected_prev[2];
	end
	if (
		( IB_expected_prev[3] !== 1'bx ) && ( IB_prev[3] !== IB_expected_prev[3] )
		&& ((IB_expected_prev[3] !== last_IB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[3] = IB_expected_prev[3];
	end
	if (
		( IB_expected_prev[4] !== 1'bx ) && ( IB_prev[4] !== IB_expected_prev[4] )
		&& ((IB_expected_prev[4] !== last_IB_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[4] = IB_expected_prev[4];
	end
	if (
		( IB_expected_prev[5] !== 1'bx ) && ( IB_prev[5] !== IB_expected_prev[5] )
		&& ((IB_expected_prev[5] !== last_IB_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[5] = IB_expected_prev[5];
	end
	if (
		( IB_expected_prev[6] !== 1'bx ) && ( IB_prev[6] !== IB_expected_prev[6] )
		&& ((IB_expected_prev[6] !== last_IB_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[6] = IB_expected_prev[6];
	end
	if (
		( IB_expected_prev[7] !== 1'bx ) && ( IB_prev[7] !== IB_expected_prev[7] )
		&& ((IB_expected_prev[7] !== last_IB_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[7] = IB_expected_prev[7];
	end
	if (
		( IB_expected_prev[8] !== 1'bx ) && ( IB_prev[8] !== IB_expected_prev[8] )
		&& ((IB_expected_prev[8] !== last_IB_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[8] = IB_expected_prev[8];
	end
	if (
		( IB_expected_prev[9] !== 1'bx ) && ( IB_prev[9] !== IB_expected_prev[9] )
		&& ((IB_expected_prev[9] !== last_IB_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[9] = IB_expected_prev[9];
	end
	if (
		( IB_expected_prev[10] !== 1'bx ) && ( IB_prev[10] !== IB_expected_prev[10] )
		&& ((IB_expected_prev[10] !== last_IB_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[10] = IB_expected_prev[10];
	end
	if (
		( IB_expected_prev[11] !== 1'bx ) && ( IB_prev[11] !== IB_expected_prev[11] )
		&& ((IB_expected_prev[11] !== last_IB_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[11] = IB_expected_prev[11];
	end
	if (
		( IB_expected_prev[12] !== 1'bx ) && ( IB_prev[12] !== IB_expected_prev[12] )
		&& ((IB_expected_prev[12] !== last_IB_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[12] = IB_expected_prev[12];
	end
	if (
		( IB_expected_prev[13] !== 1'bx ) && ( IB_prev[13] !== IB_expected_prev[13] )
		&& ((IB_expected_prev[13] !== last_IB_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[13] = IB_expected_prev[13];
	end
	if (
		( IB_expected_prev[14] !== 1'bx ) && ( IB_prev[14] !== IB_expected_prev[14] )
		&& ((IB_expected_prev[14] !== last_IB_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[14] = IB_expected_prev[14];
	end
	if (
		( IB_expected_prev[15] !== 1'bx ) && ( IB_prev[15] !== IB_expected_prev[15] )
		&& ((IB_expected_prev[15] !== last_IB_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IB_expected_prev);
		$display ("     Real value = %b", IB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IB_exp[15] = IB_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DoAn_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] I;
// wires                                               
wire [15:0] IA;
wire [15:0] IB;

wire sampler;                             

// assign statements (if any)                          
DoAn i1 (
// port map - connection between master ports and signals/registers   
	.I(I),
	.IA(IA),
	.IB(IB)
);
// I[ 15 ]
initial
begin
	I[15] = 1'b0;
	I[15] = #180000 1'b1;
	I[15] = #260000 1'b0;
end 
// I[ 14 ]
initial
begin
	I[14] = 1'b0;
	I[14] = #180000 1'b1;
	I[14] = #260000 1'b0;
end 
// I[ 13 ]
initial
begin
	I[13] = 1'b0;
	I[13] = #180000 1'b1;
	I[13] = #260000 1'b0;
end 
// I[ 12 ]
initial
begin
	I[12] = 1'b0;
end 
// I[ 11 ]
initial
begin
	I[11] = 1'b0;
end 
// I[ 10 ]
initial
begin
	I[10] = 1'b0;
	I[10] = #180000 1'b1;
	I[10] = #260000 1'b0;
end 
// I[ 9 ]
initial
begin
	I[9] = 1'b0;
	I[9] = #10000 1'b1;
	I[9] = #430000 1'b0;
end 
// I[ 8 ]
initial
begin
	I[8] = 1'b0;
	I[8] = #10000 1'b1;
	I[8] = #430000 1'b0;
end 
// I[ 7 ]
initial
begin
	I[7] = 1'b0;
	I[7] = #10000 1'b1;
	I[7] = #170000 1'b0;
end 
// I[ 6 ]
initial
begin
	I[6] = 1'b0;
	I[6] = #10000 1'b1;
	I[6] = #170000 1'b0;
end 
// I[ 5 ]
initial
begin
	I[5] = 1'b0;
	I[5] = #10000 1'b1;
	I[5] = #170000 1'b0;
end 
// I[ 4 ]
initial
begin
	I[4] = 1'b0;
end 
// I[ 3 ]
initial
begin
	I[3] = 1'b0;
end 
// I[ 2 ]
initial
begin
	I[2] = 1'b0;
end 
// I[ 1 ]
initial
begin
	I[1] = 1'b0;
end 
// I[ 0 ]
initial
begin
	I[0] = 1'b0;
end 

DoAn_vlg_sample_tst tb_sample (
	.I(I),
	.sampler_tx(sampler)
);

DoAn_vlg_check_tst tb_out(
	.IA(IA),
	.IB(IB),
	.sampler_rx(sampler)
);
endmodule

